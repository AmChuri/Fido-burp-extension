/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package src.main.eu.devity.burp.fidoiot.gui;
import burp.IBurpExtenderCallbacks;
import burp.IExtensionHelpers;
import burp.IHttpRequestResponse;
import burp.IRequestInfo;
import src.main.eu.devity.burp.fidoiot.attacks.KeyConfusion;
import src.main.eu.devity.burp.fidoiot.attacks.SSRFAttack;
import src.main.eu.devity.burp.fidoiot.attacks.SignatureExcl;
import src.main.eu.devity.burp.fidoiot.utilities.JsonParser;
import src.main.eu.devity.burp.fidoiot.utilities.Logger;
import src.main.eu.devity.burp.fidoiot.utilities.TypeValues;
import src.main.eu.devity.burp.fidoiot.utilities.TypeValues.*;
import src.main.eu.devity.burp.fidoiot.utilities.custom.Certificate;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import javax.swing.BorderFactory;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

import org.apache.commons.lang3.SystemUtils;

/**
 *
 * @author amay
 */
public class AttackTabPanel extends javax.swing.JPanel {
    private final IBurpExtenderCallbacks callbacks;
    private final IExtensionHelpers helpers;
    private static final Logger loggerInstance = Logger.getInstance();

    private IHttpRequestResponse requestResponse;
    private IRequestInfo requestInfo;
    private String request, messageBody;
    String ssrfSubAttackType[]={"Host Header", "Protocol Smuggling", "SSRF"};

    TitledBorder customInputTitle, reqTitle, outputTitle, instTitle;
    private SSRFAttack ssrfAttack;
    private boolean isProxy = false;
    private ATTACKS selectedAttack;
    private JsonParser certList;
    private SignatureExcl sigExcl;
    private KeyConfusion keyConfusion;
    List<String> certListStr = new ArrayList<>();
    String tempCertList[]={"Select Certificate", "Type 22 Public Key", "Type 22 Private key", "Custom EC 256", "Custom EC 384", "Custom RSA 2048"};
    String privKey = "";


    /**
     * Creates new form AttackTabPanel
     */
    public AttackTabPanel(IBurpExtenderCallbacks callbacks, IHttpRequestResponse message) {
        customInputTitle = BorderFactory.createTitledBorder("Custom Input");
        reqTitle = BorderFactory.createTitledBorder("Request");
        outputTitle = BorderFactory.createTitledBorder("Output");
        instTitle = BorderFactory.createTitledBorder("Instruction");
        
        this.callbacks = callbacks;
        this.helpers = callbacks.getHelpers();
        this.requestResponse = message;
        this.requestInfo = helpers.analyzeRequest(message);
        ssrfAttack = new SSRFAttack(callbacks, message);
        sigExcl = new SignatureExcl(callbacks, message);
        keyConfusion = new KeyConfusion(callbacks, message);
        initValues();
        initComponents();
        initCertList();
        
    }

    private void initValues() {
        this.request = new String(requestResponse.getRequest());
        this.messageBody = request.substring(requestInfo.getBodyOffset());
        certList = new JsonParser();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        dropDownPanel = new javax.swing.JPanel();
        attackLabel = new javax.swing.JLabel();
        subAttackLabel = new javax.swing.JLabel();
        certLabel = new javax.swing.JLabel();
        attackTypeList = new javax.swing.JComboBox<>();
        subAttackListCB = new javax.swing.JComboBox<>();
        certListCB = new javax.swing.JComboBox<>();
        instPanel = new javax.swing.JPanel();
        instScroll = new javax.swing.JScrollPane();
        instText = new javax.swing.JTextPane();
        requestPanel = new javax.swing.JPanel();
        requestScroll = new javax.swing.JScrollPane();
        requestText = new javax.swing.JTextPane();
        outputPanel = new javax.swing.JPanel();
        outPutScroll = new javax.swing.JScrollPane();
        outPutText = new javax.swing.JTextPane();
        analysisPanel = new javax.swing.JPanel();
        analysisJScroll = new javax.swing.JScrollPane();
        analysisText = new javax.swing.JTextPane();
        customInputPAnel = new javax.swing.JPanel();
        inputLabel = new javax.swing.JLabel();
        proxyLabel = new javax.swing.JLabel();
        proxyHostLabel = new javax.swing.JLabel();
        proxyPortLabel = new javax.swing.JLabel();
        modifyBtn = new javax.swing.JButton();
        analyzeBtn = new javax.swing.JButton();
        attackBtn = new javax.swing.JButton();
        inputURL = new javax.swing.JTextField();
        proxyInput = new javax.swing.JCheckBox();
        proxyHostText = new javax.swing.JTextField();
        proxyPortText = new javax.swing.JTextField();
        inputPort = new javax.swing.JTextField();
        inputPortLabel = new javax.swing.JLabel();
        customValuePanel = new javax.swing.JPanel();
        customInputScroll = new javax.swing.JScrollPane();
        customInputText = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        attackLabel.setText("Attack");

        subAttackLabel.setText("Sub Attack");

        certLabel.setText("Certificate");

        attackTypeList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Signature Exclusion", "Key Confusion", "SSRF" }));
        attackTypeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attackTypeListActionPerformed(evt);
            }
        });

        subAttackListCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Attack" }));
        subAttackListCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subAttackListCBActionPerformed(evt);
            }
        });

        certListCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add Certificate" }));
        certListCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                certListCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dropDownPanelLayout = new javax.swing.GroupLayout(dropDownPanel);
        dropDownPanel.setLayout(dropDownPanelLayout);
        dropDownPanelLayout.setHorizontalGroup(
            dropDownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dropDownPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(dropDownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dropDownPanelLayout.createSequentialGroup()
                        .addGroup(dropDownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(attackLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subAttackLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(dropDownPanelLayout.createSequentialGroup()
                        .addComponent(certLabel)
                        .addGap(9, 9, 9)))
                .addGroup(dropDownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(attackTypeList, 0, 250, Short.MAX_VALUE)
                    .addComponent(subAttackListCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(certListCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        dropDownPanelLayout.setVerticalGroup(
            dropDownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dropDownPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dropDownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attackLabel)
                    .addComponent(attackTypeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dropDownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subAttackLabel)
                    .addComponent(subAttackListCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dropDownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(certLabel)
                    .addComponent(certListCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        instScroll.setBorder(javax.swing.BorderFactory.createTitledBorder("Instruction"));

        instText.setEditable(false);
        instText.setContentType("text/html"); // NOI18N
        instScroll.setViewportView(instText);

        javax.swing.GroupLayout instPanelLayout = new javax.swing.GroupLayout(instPanel);
        instPanel.setLayout(instPanelLayout);
        instPanelLayout.setHorizontalGroup(
            instPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(instScroll)
        );
        instPanelLayout.setVerticalGroup(
            instPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, instPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(instScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        requestScroll.setBorder(javax.swing.BorderFactory.createTitledBorder("Request"));

        requestText.setEditable(false);
        requestText.setText(request);
        requestScroll.setViewportView(requestText);

        javax.swing.GroupLayout requestPanelLayout = new javax.swing.GroupLayout(requestPanel);
        requestPanel.setLayout(requestPanelLayout);
        requestPanelLayout.setHorizontalGroup(
            requestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, requestPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(requestScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                .addContainerGap())
        );
        requestPanelLayout.setVerticalGroup(
            requestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(requestScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
        );

        outPutScroll.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        outPutText.setEditable(false);
        outPutScroll.setViewportView(outPutText);

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outPutScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 1070, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outPutScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );

        analysisJScroll.setBorder(javax.swing.BorderFactory.createTitledBorder("Analysis Result"));

        analysisText.setEditable(false);
        analysisText.setContentType("text/html"); // NOI18N
        analysisJScroll.setViewportView(analysisText);

        javax.swing.GroupLayout analysisPanelLayout = new javax.swing.GroupLayout(analysisPanel);
        analysisPanel.setLayout(analysisPanelLayout);
        analysisPanelLayout.setHorizontalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(analysisJScroll)
                .addContainerGap())
        );
        analysisPanelLayout.setVerticalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(analysisJScroll, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        inputLabel.setText("URL");

        proxyLabel.setText("Proxy");

        proxyHostLabel.setText("Proxy Host");

        proxyPortLabel.setText("Proxy Port");

        modifyBtn.setText("Modify");
        modifyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyBtnActionPerformed(evt);
            }
        });

        analyzeBtn.setText("Analyze");
        analyzeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeBtnActionPerformed(evt);
            }
        });

        attackBtn.setText("Attack");
        attackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attackBtnActionPerformed(evt);
            }
        });

        proxyInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proxyInputActionPerformed(evt);
            }
        });

        inputPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputPortActionPerformed(evt);
            }
        });

        inputPortLabel.setText("Port");

        javax.swing.GroupLayout customInputPAnelLayout = new javax.swing.GroupLayout(customInputPAnel);
        customInputPAnel.setLayout(customInputPAnelLayout);
        customInputPAnelLayout.setHorizontalGroup(
            customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customInputPAnelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customInputPAnelLayout.createSequentialGroup()
                        .addGroup(customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customInputPAnelLayout.createSequentialGroup()
                                .addComponent(modifyBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(analyzeBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(attackBtn))
                            .addGroup(customInputPAnelLayout.createSequentialGroup()
                                .addComponent(proxyPortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(proxyPortText, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)))
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customInputPAnelLayout.createSequentialGroup()
                        .addGroup(customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(inputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(proxyLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(inputPortLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(proxyHostLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(proxyHostText)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, customInputPAnelLayout.createSequentialGroup()
                                .addComponent(proxyInput)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(inputPort)
                            .addComponent(inputURL))
                        .addGap(14, 14, 14))))
        );
        customInputPAnelLayout.setVerticalGroup(
            customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customInputPAnelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputLabel)
                    .addComponent(inputURL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputPortLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(proxyInput)
                    .addComponent(proxyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(proxyHostLabel)
                    .addComponent(proxyHostText, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(proxyPortLabel)
                    .addComponent(proxyPortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(customInputPAnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifyBtn)
                    .addComponent(analyzeBtn)
                    .addComponent(attackBtn))
                .addGap(30, 30, 30))
        );

        customInputScroll.setBorder(javax.swing.BorderFactory.createTitledBorder("Custom Input"));
        customInputScroll.setViewportView(customInputText);

        javax.swing.GroupLayout customValuePanelLayout = new javax.swing.GroupLayout(customValuePanel);
        customValuePanel.setLayout(customValuePanelLayout);
        customValuePanelLayout.setHorizontalGroup(
            customValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customValuePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customInputScroll))
        );
        customValuePanelLayout.setVerticalGroup(
            customValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customValuePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(customInputScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analysisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dropDownPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(instPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customInputPAnel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(customValuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(requestPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(requestPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                            .addComponent(dropDownPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(instPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(customValuePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customInputPAnel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(analysisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        add(mainPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void attackTypeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attackTypeListActionPerformed
        // TODO add your handling code here:
        int data = attackTypeList.getSelectedIndex();
        if(data == 0) {
            this.selectedAttack = TypeValues.ATTACKS.SIGNATUREEXCL;
            subAttackListCB.setModel(new javax.swing.DefaultComboBoxModel<>(TypeValues.signExclSubAtk));
            instText.setText(TypeValues.signExclInst);
        } else if(data == 1) {
            this.selectedAttack = TypeValues.ATTACKS.KEYCONFUSION;
            subAttackListCB.setModel(new javax.swing.DefaultComboBoxModel<>(TypeValues.keyConfSubAtk));
            instText.setText(TypeValues.keyConfInst);
        } else if(data == 2) {
            this.selectedAttack = TypeValues.ATTACKS.SSRF;
            instText.setText(TypeValues.ssrfInst);
            subAttackListCB.setModel(new javax.swing.DefaultComboBoxModel<>(TypeValues.ssrfSubAtk));
        } else {
            loggerToOutput("Please select proper Attack type");
        }
        

    }//GEN-LAST:event_attackTypeListActionPerformed

    private void subAttackListCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subAttackListCBActionPerformed
        int data;
        if(this.selectedAttack == TypeValues.ATTACKS.SSRF){
            data = subAttackListCB.getSelectedIndex();
            if(data == 0) {
                instText.setText(TypeValues.ssrfSubInst);
            } else if(data == 1) { 
                instText.setText(TypeValues.ssrfHostHeaderInst);
            } else if(data == 2) {
                instText.setText(TypeValues.ssrfProtocolSmugglingInst);
            }
        }
    }//GEN-LAST:event_subAttackListCBActionPerformed

    private void certListCBActionPerformed(java.awt.event.ActionEvent evt)  {//GEN-FIRST:event_certListCBActionPerformed
        List<Certificate> temp = certList.getCertificate();
        int data = certListCB.getSelectedIndex();
        Certificate test = temp.get(data-1);
        privKey = getFileKey(test.getFile());

    }//GEN-LAST:event_certListCBActionPerformed

    private void proxyInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proxyInputActionPerformed
        // Toggle proxy value
        isProxy = !isProxy;
    }//GEN-LAST:event_proxyInputActionPerformed

    private void analyzeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeBtnActionPerformed
        boolean flag = false;
        int index1, index2;
        index1 = messageBody.indexOf("\"sg\"");
        index2 = messageBody.indexOf("\"dns\"");
        if (index1 != -1 && index2 != -1){
            analysisText.setText(TypeValues.analysisHeader + TypeValues.analysisSig + TypeValues.analysisSSRF);
            flag = true;
        } else if (index1 != -1 && index2 == -1) {
            analysisText.setText(TypeValues.analysisHeader + TypeValues.analysisSig);
            flag = true;
        }else if (index1 == -1 && index2 != -1) {
            analysisText.setText(TypeValues.analysisHeader +  TypeValues.analysisSSRF);
            flag = true;
        } else {
            analysisText.setText(TypeValues.analysisHeader +  TypeValues.analysisNoAttack);
        }
        

    }//GEN-LAST:event_analyzeBtnActionPerformed

    private void attackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attackBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_attackBtnActionPerformed

    private void modifyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modifyBtnActionPerformed

    private void inputPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputPortActionPerformed

    private void addToOutput(String outputString) {
        String temp = outPutText.getText();
        outPutText.setText(temp + "\n" + outputString);
    }

    private void loggerToOutput(String actionPerformed) {
        String temp = outPutText.getText();
        String outputString = loggerInstance.logToString(getClass(), actionPerformed, Logger.LogLevel.INFO);
        outPutText.setText(temp + "\n" + outputString);
    }

    private void initCertList() {
        List<Certificate> temp = certList.getCertificate();
        certListStr.add("Select Certificate");
        // loggerInstance.log(getClass(), "size"+temp.size(), Logger.LogLevel.INFO);
        //     for (Certificate cert : temp) {
        //         certListStr.add(cert.getName());
        //     }
        //     String[] stringArray = (String[]) certListStr.toArray(new String[0]);
            certListCB.setModel(new javax.swing.DefaultComboBoxModel<>(tempCertList));
    }

    private String getFileKey(String filename) {
        String temp = "";
        try {
            FileInputStream test2 = new FileInputStream(filename);
            temp = new String(test2.readAllBytes());
        } catch ( IOException e) {
            loggerToOutput("File not found");
        }
        return temp;
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane analysisJScroll;
    private javax.swing.JPanel analysisPanel;
    private javax.swing.JTextPane analysisText;
    private javax.swing.JButton analyzeBtn;
    private javax.swing.JButton attackBtn;
    private javax.swing.JLabel attackLabel;
    private javax.swing.JComboBox<String> attackTypeList;
    private javax.swing.JLabel certLabel;
    private javax.swing.JComboBox<String> certListCB;
    private javax.swing.JPanel customInputPAnel;
    private javax.swing.JScrollPane customInputScroll;
    private javax.swing.JTextPane customInputText;
    private javax.swing.JPanel customValuePanel;
    private javax.swing.JPanel dropDownPanel;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JTextField inputPort;
    private javax.swing.JLabel inputPortLabel;
    private javax.swing.JTextField inputURL;
    private javax.swing.JPanel instPanel;
    private javax.swing.JScrollPane instScroll;
    private javax.swing.JTextPane instText;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton modifyBtn;
    private javax.swing.JScrollPane outPutScroll;
    private javax.swing.JTextPane outPutText;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JLabel proxyHostLabel;
    private javax.swing.JTextField proxyHostText;
    private javax.swing.JCheckBox proxyInput;
    private javax.swing.JLabel proxyLabel;
    private javax.swing.JLabel proxyPortLabel;
    private javax.swing.JTextField proxyPortText;
    private javax.swing.JPanel requestPanel;
    private javax.swing.JScrollPane requestScroll;
    private javax.swing.JTextPane requestText;
    private javax.swing.JLabel subAttackLabel;
    private javax.swing.JComboBox<String> subAttackListCB;
    // End of variables declaration//GEN-END:variables
}
