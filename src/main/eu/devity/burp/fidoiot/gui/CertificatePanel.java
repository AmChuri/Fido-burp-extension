/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package src.main.eu.devity.burp.fidoiot.gui;
import javax.swing.*;

import src.main.eu.devity.burp.fidoiot.utilities.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author amay
 */
public class CertificatePanel extends javax.swing.JPanel {

    private static final String certificateFilePath = System.getProperty("user.home") + "/.fido/certificate.json";
    private static final Logger loggerInstance = Logger.getInstance();
    private static DefaultListModel<String> certListModel = new DefaultListModel<>();
    public static String certIndex[] = {"EC", "RSA"};
    JSONArray mainArray;

    /**
     * Creates new form CertificatePanel
     */
    public CertificatePanel() {
        initComponents();

        // load or create certificate file
        try {
            File certFile = new File(certificateFilePath);
            // Check if directory exists, if not create it
            if (!certFile.getParentFile().exists()) {
                loggerInstance.log(getClass(), "Certificate file directory not found! Creating it...", Logger.LogLevel.DEBUG);
                certFile.getParentFile().mkdir();
            }
            // Check if config file exists, if not create it
            if (!certFile.exists()) {
                loggerInstance.log(getClass(), "Config file not found! Creating it...", Logger.LogLevel.DEBUG);
                certFile.createNewFile();
                // Update UI elements
                certListModel.clear();

            } else {
                loggerInstance.log(getClass(), "Loading Certificate file.", Logger.LogLevel.DEBUG);
                loadCertlist();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.toString(), "Error loading certificate file", JOptionPane.ERROR_MESSAGE);
            loggerInstance.log(getClass(), e.toString(), Logger.LogLevel.ERROR);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        instPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        instTextPane = new javax.swing.JTextPane();
        selectPanel = new javax.swing.JPanel();
        selectText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        selectBtn = new javax.swing.JButton();
        certType = new javax.swing.JComboBox<>();
        saveBtn = new javax.swing.JButton();
        nameInput = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        listMainPanel = new javax.swing.JPanel();
        listPanel = new javax.swing.JPanel();
        listScrollPane = new javax.swing.JScrollPane();
        certList = new javax.swing.JList<>();
        deleteBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputText = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        instTextPane.setEditable(false);
        instTextPane.setContentType("text/html"); // NOI18N
        instTextPane.setText("<p style=\"text-align:center;\">Instruction</p>\n<ul>\n<li>Select Certificate file from folder</li>\n<li>Add custom name to the Certificate</li>\n<li>Select type of Certificate</li>\n<li>Add</li>\n</ul>");
        jScrollPane2.setViewportView(instTextPane);

        javax.swing.GroupLayout instPanelLayout = new javax.swing.GroupLayout(instPanel);
        instPanel.setLayout(instPanelLayout);
        instPanelLayout.setHorizontalGroup(
            instPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addContainerGap())
        );
        instPanelLayout.setVerticalGroup(
            instPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addContainerGap())
        );

        selectText.setEditable(false);
        selectText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectTextActionPerformed(evt);
            }
        });

        jLabel1.setText("File :");

        selectBtn.setText("Select File");
        selectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBtnActionPerformed(evt);
            }
        });

        certType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EC", "RSA" }));

        saveBtn.setText("Add");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        nameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameInputActionPerformed(evt);
            }
        });

        nameLabel.setText("Name:");

        typeLabel.setText("Type:");

        javax.swing.GroupLayout selectPanelLayout = new javax.swing.GroupLayout(selectPanel);
        selectPanel.setLayout(selectPanelLayout);
        selectPanelLayout.setHorizontalGroup(
            selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectPanelLayout.createSequentialGroup()
                .addGroup(selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(selectPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1))
                    .addGroup(selectPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(typeLabel)))
                .addGap(12, 12, 12)
                .addGroup(selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(selectPanelLayout.createSequentialGroup()
                        .addComponent(selectText, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectBtn))
                    .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(certType, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, selectPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(262, 262, 262))
        );
        selectPanelLayout.setVerticalGroup(
            selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectBtn)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(certType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(saveBtn))
        );

        certList.setBorder(javax.swing.BorderFactory.createTitledBorder("Certificate List"));
        certList.setModel(certListModel);
        certList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listScrollPane.setViewportView(certList);
        certList.getAccessibleContext().setAccessibleName("");

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        outputText.setEditable(false);
        outputText.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));
        jScrollPane1.setViewportView(outputText);

        javax.swing.GroupLayout listPanelLayout = new javax.swing.GroupLayout(listPanel);
        listPanel.setLayout(listPanelLayout);
        listPanelLayout.setHorizontalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 937, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))))
        );
        listPanelLayout.setVerticalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listPanelLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(listScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(listPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(deleteBtn)))
                .addContainerGap())
        );

        javax.swing.GroupLayout listMainPanelLayout = new javax.swing.GroupLayout(listMainPanel);
        listMainPanel.setLayout(listMainPanelLayout);
        listMainPanelLayout.setHorizontalGroup(
            listMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        listMainPanelLayout.setVerticalGroup(
            listMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(instPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 173, Short.MAX_VALUE))
                    .addComponent(listMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(selectPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(instPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(mainPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void selectTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectTextActionPerformed

    private void selectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBtnActionPerformed
        // TODO add your handling code here:
        fileChooser = new JFileChooser();
        int response = fileChooser.showOpenDialog(null);
        if(response == JFileChooser.APPROVE_OPTION){
            File file = new File(fileChooser.getSelectedFile().getAbsolutePath());
            selectText.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_selectBtnActionPerformed

    private void nameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameInputActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        getCertList();
        
        for (int certIndex : certList.getSelectedIndices()) {
            
            certListModel.removeElementAt(certIndex);
            mainArray.remove(certIndex);
            updateCertFile();
        }
        outputText.setText("Certificate removed from the list");
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // add file to json
        String filePath = selectText.getText();
        String fileName = nameInput.getText();
        int index = certType.getSelectedIndex();
        boolean flag = true;
        if(filePath.length() == 0){
            outputText.setText("No file was selected");
            flag = false;
        }
        if(fileName.length() == 0){
            outputText.setText("No file name was added");
            flag = false;
        }
        if(flag){
            certListModel.getSize();
            outputText.setText("Certificate added");
            certListModel.addElement(fileName);
            saveCert(filePath, fileName, certIndex[index]);
            selectText.setText("");
            nameInput.setText("");
        }

    }//GEN-LAST:event_saveBtnActionPerformed

    private void saveCert(String filePath, String fileName, String fileType) {
        File certFile = new File(certificateFilePath);
        
        getCertList();

        if (!certFile.exists()) {
            loggerInstance.log(getClass(), "Certificate file does not exist!", Logger.LogLevel.ERROR);
            return;
        }

        if (!certFile.isDirectory() && certFile.canWrite()) {

            JSONObject certObj = new JSONObject();
            certObj.put("file", filePath);
            certObj.put("name", fileName);
            certObj.put("type", fileType);
            mainArray.add(certObj);
            updateCertFile();
        } else {
            JOptionPane.showMessageDialog(this, "The config file is not writable: " + certificateFilePath, "Error writing config file", JOptionPane.ERROR_MESSAGE);
            loggerInstance.log(getClass(), "Config file is not writable: " + certificateFilePath, Logger.LogLevel.ERROR);
        }
    }

    @SuppressWarnings("unchecked")
    private void loadCertlist() {
                getCertList();
                JSONArray array = mainArray;
                certListModel.clear();
                for (int i = 0; i < array.size(); i++) {
                    JSONObject obj = (JSONObject) array.get(i);
                    String temp = (String) obj.get("name");
                    certListModel.addElement(temp);
                  }

    }

    @SuppressWarnings("unchecked")
    private void getCertList() {
        File certFile = new File(certificateFilePath);
        if (!certFile.exists()) {
            loggerInstance.log(getClass(), "Config file does not exist!", Logger.LogLevel.ERROR);
        }

        if (!certFile.isDirectory() && certFile.canRead()) {

            JSONParser jsonParser = new JSONParser();

            try {
                FileReader certFileReader = new FileReader(certFile);
                JSONObject certObj = (JSONObject) jsonParser.parse(certFileReader);
                mainArray = (JSONArray) certObj.get("list");
            } catch ( Exception e) {
                loggerInstance.log(getClass(), "Config file can not be read!\n" + e.toString(), Logger.LogLevel.ERROR);
            }
        } else {
            loggerInstance.log(getClass(), "The config file is not readable or a directory: " + certificateFilePath, Logger.LogLevel.ERROR);
        }
    }

    @SuppressWarnings("unchecked")
    private void updateCertFile() {
        File certFile = new File(certificateFilePath);
        JSONObject mainListObj = new JSONObject();
        mainListObj.put("list",mainArray);
        try {
            FileWriter certFileWriter = new FileWriter(certFile);

            try {
                certFileWriter.write(mainListObj.toJSONString());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "The config file can not be written!\n\nError:\n" + e.toString(), "Error writing config file",
                        JOptionPane.ERROR_MESSAGE);
                loggerInstance.log(getClass(), "Config file can not be written!\n" + e.toString(), Logger.LogLevel.ERROR);
            }

            certFileWriter.flush();
            certFileWriter.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "The config file can not be written!\n\nError:\n" + e.toString(), "Error writing config file",
                    JOptionPane.ERROR_MESSAGE);
            loggerInstance.log(getClass(), "Config file can not be written!\n" + e.toString(), Logger.LogLevel.ERROR);
        } catch (Exception e) {
            loggerInstance.log(getClass(), e.toString(), Logger.LogLevel.ERROR);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> certList;
    private javax.swing.JComboBox<String> certType;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JPanel instPanel;
    private javax.swing.JTextPane instTextPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel listMainPanel;
    private javax.swing.JPanel listPanel;
    private javax.swing.JScrollPane listScrollPane;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField nameInput;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextPane outputText;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton selectBtn;
    private javax.swing.JPanel selectPanel;
    private javax.swing.JTextField selectText;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables
private JFileChooser fileChooser;
}
