package src.main.eu.devity.burp.fidoiot.gui;

import burp.IBurpExtenderCallbacks;
import burp.IExtensionHelpers;
import src.main.eu.devity.burp.fidoiot.utilities.Logger;
import src.main.eu.devity.burp.fidoiot.utilities.SignatureFn;

import javax.swing.*;
import java.awt.*;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.Signature;

import java.util.Objects;
import java.security.MessageDigest;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import java.security.InvalidKeyException;
import java.security.SignatureException;
import javax.crypto.NoSuchPaddingException;
import java.security.NoSuchProviderException;
import java.io.UnsupportedEncodingException;
import javax.crypto.*;
import java.lang.reflect.Array;
import java.math.BigInteger;

import javax.crypto.Cipher;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author amay
 */
public class SignatureTab extends javax.swing.JPanel {
private String signatureType[]= {"SHA1withRSA", "SHA256withRSA", "SHA384withRSA", "SHA512withRSA",
            "NONEwithECDSA","SHA1withECDSA","SHA256withECDSA","SHA384withECDSA", "SHA512withECDSA"};
private String hmacType[]= {"HmacSHA256", "HmacSHA512"};

    private final IBurpExtenderCallbacks callbacks;
    private final IExtensionHelpers helpers;
    private static final Logger loggerInstance = Logger.getInstance();
    private SignatureFn signatureFn;
    /**
     * Creates new form SignaturePanelTab
     */
    public SignatureTab(IBurpExtenderCallbacks callbacks) {

        this.callbacks = callbacks;
        this.helpers = callbacks.getHelpers();
        signatureFn = new SignatureFn();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        inputScrollPane = new javax.swing.JScrollPane();
        inputText = new javax.swing.JTextPane();
        keyScrollPane = new javax.swing.JScrollPane();
        keyText = new javax.swing.JTextPane();
        typeCombo = new javax.swing.JComboBox<>();
        typeLabel = new javax.swing.JLabel();
        signatureLabel = new javax.swing.JLabel();
        signatureCombo = new javax.swing.JComboBox<>();
        keyTypeLabel = new javax.swing.JLabel();
        keyTypeCombo = new javax.swing.JComboBox<>();
        computeBtn = new javax.swing.JButton();
        outPutScrollPane = new javax.swing.JScrollPane();
        outPutText = new javax.swing.JTextPane();
        lenghtPane = new javax.swing.JScrollPane();
        lengthText = new javax.swing.JTextPane();
        copyBtn = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        inputText.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Input"));
        inputScrollPane.setViewportView(inputText);

        keyText.setBorder(javax.swing.BorderFactory.createTitledBorder("Key Value"));
        keyScrollPane.setViewportView(keyText);

        typeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Signature", "HMAC" }));

        typeLabel.setText("Type");

        signatureLabel.setText("Signature Algorithm");

        signatureCombo.setModel(new javax.swing.DefaultComboBoxModel<>(signatureType));
        signatureCombo.setSelectedIndex(6);
        typeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboActionPerformed(evt);
            }
        });

        keyTypeLabel.setText("Key Type");

        keyTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EC", "RSA" }));

        computeBtn.setText("Compute");
        computeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeBtnActionPerformed(evt);
            }
        });

        outPutScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        outPutText.setEditable(false);
        outPutScrollPane.setViewportView(outPutText);

        lenghtPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Length"));

        lengthText.setEditable(false);
        lenghtPane.setViewportView(lengthText);

        copyBtn.setText("Copy");
        copyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outPutScrollPane)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(inputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(keyScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                                        .addComponent(typeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGap(0, 0, Short.MAX_VALUE))
                                                    .addComponent(keyTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(signatureLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(signatureCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(typeCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 240, Short.MAX_VALUE)
                                            .addComponent(keyTypeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(computeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(83, 83, 83))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(lenghtPane, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                        .addComponent(copyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(keyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(typeLabel)
                            .addComponent(typeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(signatureLabel)
                            .addComponent(signatureCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(keyTypeLabel)
                            .addComponent(keyTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(computeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outPutScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lenghtPane, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(copyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(91, Short.MAX_VALUE))
        );

        add(mainPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void computeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeBtnActionPerformed
        // gather all the requiored data
        loggerInstance.log(getClass(), "Compute Signature", Logger.LogLevel.INFO);
        String modText=inputText.getText();
        String privateKeyContent = keyText.getText();
        privateKeyContent = privateKeyContent.replaceAll("\\n", "").replace("-----BEGIN PRIVATE KEY-----", "").replace("-----END PRIVATE KEY-----", "");
        int computeType = typeCombo.getSelectedIndex();
        int signAlgo =  signatureCombo.getSelectedIndex();
        int keyType = keyTypeCombo.getSelectedIndex();
        
        String keyinstanceType = "EC";
        if(keyType == 1 ){
            keyinstanceType="RSA";
        }
        if(computeType == 0) {
            String temp = (String) Array.get(signatureType, signAlgo);
            // compute signature
            String returnVal;
            returnVal = signatureFn.computeSignature(modText, privateKeyContent, keyinstanceType, temp);
            outPutText.setText(""+returnVal);
            if (!returnVal.contains("Error")){
                byte[] decoded = Base64.getDecoder().decode(returnVal);
                lengthText.setText(""+String.format("%040x", new BigInteger(1, decoded)).length()/2);
            }
        } else {
            String temp = (String) Array.get(hmacType, signAlgo);
            byte[] tempHmac =  signatureFn.hmac256SHAgen(privateKeyContent.getBytes(), modText.getBytes(), temp);
            String signature = Base64.getEncoder().encodeToString(tempHmac); 
            outPutText.setText(""+signature);
            lengthText.setText(""+signatureFn.encodedByteLength(tempHmac));
        }
        

    }//GEN-LAST:event_computeBtnActionPerformed
    
    private void typeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyBtnActionPerformed
        // TODO add your handling code here:
        int computeType = typeCombo.getSelectedIndex();
        if(computeType == 0) {
            signatureCombo.setModel(new javax.swing.DefaultComboBoxModel<>(signatureType));
            signatureCombo.setSelectedIndex(6);
        } else {
            signatureCombo.setModel(new javax.swing.DefaultComboBoxModel<>(hmacType));
            signatureCombo.setSelectedIndex(0);
        }
        
    }//GEN-LAST:event_copyBtnActionPerformed

    private void copyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyBtnActionPerformed
        // TODO add your handling code here:
        inputText.copy();
    }//GEN-LAST:event_copyBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton computeBtn;
    private javax.swing.JButton copyBtn;
    private javax.swing.JScrollPane inputScrollPane;
    private javax.swing.JTextPane inputText;
    private javax.swing.JScrollPane keyScrollPane;
    private javax.swing.JTextPane keyText;
    private javax.swing.JComboBox<String> keyTypeCombo;
    private javax.swing.JLabel keyTypeLabel;
    private javax.swing.JScrollPane lenghtPane;
    private javax.swing.JTextPane lengthText;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane outPutScrollPane;
    private javax.swing.JTextPane outPutText;
    private javax.swing.JComboBox<String> signatureCombo;
    private javax.swing.JLabel signatureLabel;
    private javax.swing.JComboBox<String> typeCombo;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables
}